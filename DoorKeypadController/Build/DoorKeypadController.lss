
DoorKeypadController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000568  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000568  000005fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  0080006e  0080006e  0000060a  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000060a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000e2  00000000  00000000  0000062a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002ca  00000000  00000000  0000070c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000010e  00000000  00000000  000009d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000375  00000000  00000000  00000ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  00000e5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001bb  00000000  00000000  00000eac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000007c  00000000  00000000  00001067  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0a c0       	rjmp	.+20     	; 0x16 <__ctors_end>
   2:	23 c0       	rjmp	.+70     	; 0x4a <__bad_interrupt>
   4:	22 c0       	rjmp	.+68     	; 0x4a <__bad_interrupt>
   6:	21 c0       	rjmp	.+66     	; 0x4a <__bad_interrupt>
   8:	9b c0       	rjmp	.+310    	; 0x140 <__vector_4>
   a:	1f c0       	rjmp	.+62     	; 0x4a <__bad_interrupt>
   c:	74 c0       	rjmp	.+232    	; 0xf6 <__vector_6>
   e:	1d c0       	rjmp	.+58     	; 0x4a <__bad_interrupt>
  10:	1c c0       	rjmp	.+56     	; 0x4a <__bad_interrupt>
  12:	1b c0       	rjmp	.+54     	; 0x4a <__bad_interrupt>
  14:	1a c0       	rjmp	.+52     	; 0x4a <__bad_interrupt>

00000016 <__ctors_end>:
  16:	11 24       	eor	r1, r1
  18:	1f be       	out	0x3f, r1	; 63
  1a:	cf ed       	ldi	r28, 0xDF	; 223
  1c:	cd bf       	out	0x3d, r28	; 61

0000001e <__do_copy_data>:
  1e:	10 e0       	ldi	r17, 0x00	; 0
  20:	a0 e6       	ldi	r26, 0x60	; 96
  22:	b0 e0       	ldi	r27, 0x00	; 0
  24:	e8 e6       	ldi	r30, 0x68	; 104
  26:	f5 e0       	ldi	r31, 0x05	; 5
  28:	03 c0       	rjmp	.+6      	; 0x30 <.do_copy_data_start>

0000002a <.do_copy_data_loop>:
  2a:	c8 95       	lpm
  2c:	31 96       	adiw	r30, 0x01	; 1
  2e:	0d 92       	st	X+, r0

00000030 <.do_copy_data_start>:
  30:	ae 36       	cpi	r26, 0x6E	; 110
  32:	b1 07       	cpc	r27, r17
  34:	d1 f7       	brne	.-12     	; 0x2a <.do_copy_data_loop>

00000036 <__do_clear_bss>:
  36:	10 e0       	ldi	r17, 0x00	; 0
  38:	ae e6       	ldi	r26, 0x6E	; 110
  3a:	b0 e0       	ldi	r27, 0x00	; 0
  3c:	01 c0       	rjmp	.+2      	; 0x40 <.do_clear_bss_start>

0000003e <.do_clear_bss_loop>:
  3e:	1d 92       	st	X+, r1

00000040 <.do_clear_bss_start>:
  40:	a0 38       	cpi	r26, 0x80	; 128
  42:	b1 07       	cpc	r27, r17
  44:	e1 f7       	brne	.-8      	; 0x3e <.do_clear_bss_loop>
  46:	77 d1       	rcall	.+750    	; 0x336 <main>
  48:	8d c2       	rjmp	.+1306   	; 0x564 <_exit>

0000004a <__bad_interrupt>:
  4a:	da cf       	rjmp	.-76     	; 0x0 <__vectors>

0000004c <SetPins>:
	*portPtr = *portPtr & ~mask; //set all selected bits in port to be 0
	*portPtr = *portPtr | (value & mask); //set new bits inside port from value
}*/

void SetPins(volatile char portID, volatile char portLabel, volatile char mask, volatile char value)
{
  4c:	df 93       	push	r29
  4e:	cf 93       	push	r28
  50:	00 d0       	rcall	.+0      	; 0x52 <SetPins+0x6>
  52:	00 d0       	rcall	.+0      	; 0x54 <SetPins+0x8>
  54:	cd b7       	in	r28, 0x3d	; 61
  56:	de b7       	in	r29, 0x3e	; 62
  58:	89 83       	std	Y+1, r24	; 0x01
  5a:	6a 83       	std	Y+2, r22	; 0x02
  5c:	4b 83       	std	Y+3, r20	; 0x03
  5e:	2c 83       	std	Y+4, r18	; 0x04
	//				set all selected bits in port to be 0      set new bits inside port from value
	if (portID == 'P' && portLabel == 'B') { PORTB = PORTB & ~mask; PORTB = PORTB | (value & mask); }
  60:	89 81       	ldd	r24, Y+1	; 0x01
  62:	80 35       	cpi	r24, 0x50	; 80
  64:	71 f4       	brne	.+28     	; 0x82 <SetPins+0x36>
  66:	8a 81       	ldd	r24, Y+2	; 0x02
  68:	82 34       	cpi	r24, 0x42	; 66
  6a:	59 f4       	brne	.+22     	; 0x82 <SetPins+0x36>
  6c:	98 b3       	in	r25, 0x18	; 24
  6e:	8b 81       	ldd	r24, Y+3	; 0x03
  70:	80 95       	com	r24
  72:	89 23       	and	r24, r25
  74:	88 bb       	out	0x18, r24	; 24
  76:	28 b3       	in	r18, 0x18	; 24
  78:	9c 81       	ldd	r25, Y+4	; 0x04
  7a:	8b 81       	ldd	r24, Y+3	; 0x03
  7c:	89 23       	and	r24, r25
  7e:	82 2b       	or	r24, r18
  80:	88 bb       	out	0x18, r24	; 24
	if (portID == 'D' && portLabel == 'B') { DDRB = DDRB & ~mask; DDRB = DDRB | (value & mask); }
  82:	89 81       	ldd	r24, Y+1	; 0x01
  84:	84 34       	cpi	r24, 0x44	; 68
  86:	71 f4       	brne	.+28     	; 0xa4 <SetPins+0x58>
  88:	8a 81       	ldd	r24, Y+2	; 0x02
  8a:	82 34       	cpi	r24, 0x42	; 66
  8c:	59 f4       	brne	.+22     	; 0xa4 <SetPins+0x58>
  8e:	97 b3       	in	r25, 0x17	; 23
  90:	8b 81       	ldd	r24, Y+3	; 0x03
  92:	80 95       	com	r24
  94:	89 23       	and	r24, r25
  96:	87 bb       	out	0x17, r24	; 23
  98:	27 b3       	in	r18, 0x17	; 23
  9a:	9c 81       	ldd	r25, Y+4	; 0x04
  9c:	8b 81       	ldd	r24, Y+3	; 0x03
  9e:	89 23       	and	r24, r25
  a0:	82 2b       	or	r24, r18
  a2:	87 bb       	out	0x17, r24	; 23
	if (portID == 'P' && portLabel == 'D') { PORTD = PORTD & ~mask; PORTD = PORTD | (value & mask); }
  a4:	89 81       	ldd	r24, Y+1	; 0x01
  a6:	80 35       	cpi	r24, 0x50	; 80
  a8:	71 f4       	brne	.+28     	; 0xc6 <SetPins+0x7a>
  aa:	8a 81       	ldd	r24, Y+2	; 0x02
  ac:	84 34       	cpi	r24, 0x44	; 68
  ae:	59 f4       	brne	.+22     	; 0xc6 <SetPins+0x7a>
  b0:	92 b3       	in	r25, 0x12	; 18
  b2:	8b 81       	ldd	r24, Y+3	; 0x03
  b4:	80 95       	com	r24
  b6:	89 23       	and	r24, r25
  b8:	82 bb       	out	0x12, r24	; 18
  ba:	22 b3       	in	r18, 0x12	; 18
  bc:	9c 81       	ldd	r25, Y+4	; 0x04
  be:	8b 81       	ldd	r24, Y+3	; 0x03
  c0:	89 23       	and	r24, r25
  c2:	82 2b       	or	r24, r18
  c4:	82 bb       	out	0x12, r24	; 18
	if (portID == 'D' && portLabel == 'D') { DDRD = DDRD & ~mask; DDRD = DDRD | (value & mask); }
  c6:	89 81       	ldd	r24, Y+1	; 0x01
  c8:	84 34       	cpi	r24, 0x44	; 68
  ca:	71 f4       	brne	.+28     	; 0xe8 <__stack+0x9>
  cc:	8a 81       	ldd	r24, Y+2	; 0x02
  ce:	84 34       	cpi	r24, 0x44	; 68
  d0:	59 f4       	brne	.+22     	; 0xe8 <__stack+0x9>
  d2:	91 b3       	in	r25, 0x11	; 17
  d4:	8b 81       	ldd	r24, Y+3	; 0x03
  d6:	80 95       	com	r24
  d8:	89 23       	and	r24, r25
  da:	81 bb       	out	0x11, r24	; 17
  dc:	21 b3       	in	r18, 0x11	; 17
  de:	9c 81       	ldd	r25, Y+4	; 0x04
  e0:	8b 81       	ldd	r24, Y+3	; 0x03
  e2:	89 23       	and	r24, r25
  e4:	82 2b       	or	r24, r18
  e6:	81 bb       	out	0x11, r24	; 17

	//*portPtr = *portPtr & ~mask; //set all selected bits in port to be 0
	//*portPtr = *portPtr | (value & mask); //set new bits inside port from value
}
  e8:	0f 90       	pop	r0
  ea:	0f 90       	pop	r0
  ec:	0f 90       	pop	r0
  ee:	0f 90       	pop	r0
  f0:	cf 91       	pop	r28
  f2:	df 91       	pop	r29
  f4:	08 95       	ret

000000f6 <__vector_6>:
}

uint32_t Counter = 0;

ISR (TIMER0_OVF0_vect)          // timer overflow interrupt service routine
{
  f6:	1f 92       	push	r1
  f8:	0f 92       	push	r0
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	0f 92       	push	r0
  fe:	11 24       	eor	r1, r1
 100:	8f 93       	push	r24
 102:	9f 93       	push	r25
 104:	af 93       	push	r26
 106:	bf 93       	push	r27
	++Counter;
 108:	80 91 6e 00 	lds	r24, 0x006E
 10c:	90 91 6f 00 	lds	r25, 0x006F
 110:	a0 91 70 00 	lds	r26, 0x0070
 114:	b0 91 71 00 	lds	r27, 0x0071
 118:	01 96       	adiw	r24, 0x01	; 1
 11a:	a1 1d       	adc	r26, r1
 11c:	b1 1d       	adc	r27, r1
 11e:	80 93 6e 00 	sts	0x006E, r24
 122:	90 93 6f 00 	sts	0x006F, r25
 126:	a0 93 70 00 	sts	0x0070, r26
 12a:	b0 93 71 00 	sts	0x0071, r27
}
 12e:	bf 91       	pop	r27
 130:	af 91       	pop	r26
 132:	9f 91       	pop	r25
 134:	8f 91       	pop	r24
 136:	0f 90       	pop	r0
 138:	0f be       	out	0x3f, r0	; 63
 13a:	0f 90       	pop	r0
 13c:	1f 90       	pop	r1
 13e:	18 95       	reti

00000140 <__vector_4>:


bool State = 0;

ISR (TIMER1_COMP1_vect)          // timer compare interrupt service routine
{
 140:	1f 92       	push	r1
 142:	0f 92       	push	r0
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	0f 92       	push	r0
 148:	11 24       	eor	r1, r1
 14a:	2f 93       	push	r18
 14c:	3f 93       	push	r19
 14e:	4f 93       	push	r20
 150:	5f 93       	push	r21
 152:	6f 93       	push	r22
 154:	7f 93       	push	r23
 156:	8f 93       	push	r24
 158:	9f 93       	push	r25
 15a:	af 93       	push	r26
 15c:	bf 93       	push	r27
 15e:	ef 93       	push	r30
 160:	ff 93       	push	r31
	cli();
 162:	f8 94       	cli
	if (State)
 164:	80 91 7e 00 	lds	r24, 0x007E
 168:	88 23       	and	r24, r24
 16a:	09 f4       	brne	.+2      	; 0x16e <__vector_4+0x2e>
 16c:	af c0       	rjmp	.+350    	; 0x2cc <__vector_4+0x18c>
	{
		//DDRD = 0x00; //all inputs
		//short pins;
		Keys = PIND;
 16e:	80 b3       	in	r24, 0x10	; 16
		Keys |= (PINB & 0x03) << 6;
 170:	26 b3       	in	r18, 0x16	; 22
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	96 e0       	ldi	r25, 0x06	; 6
 176:	22 0f       	add	r18, r18
 178:	33 1f       	adc	r19, r19
 17a:	9a 95       	dec	r25
 17c:	e1 f7       	brne	.-8      	; 0x176 <__vector_4+0x36>
 17e:	30 70       	andi	r19, 0x00	; 0
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	28 2b       	or	r18, r24
 184:	39 2b       	or	r19, r25
 186:	30 93 7d 00 	sts	0x007D, r19
 18a:	20 93 7c 00 	sts	0x007C, r18
		
		//PORTD = 0xFF; //pull up
		//DDRD = 0xFF; //all outputs
		SetPins('P', 'D', 0xFF, 0xFF);//set D pull up
 18e:	80 e5       	ldi	r24, 0x50	; 80
 190:	64 e4       	ldi	r22, 0x44	; 68
 192:	4f ef       	ldi	r20, 0xFF	; 255
 194:	2f ef       	ldi	r18, 0xFF	; 255
 196:	5a df       	rcall	.-332    	; 0x4c <SetPins>
		SetPins('P', 'B', 0x03, 0xFF);//set B pull up
 198:	80 e5       	ldi	r24, 0x50	; 80
 19a:	62 e4       	ldi	r22, 0x42	; 66
 19c:	43 e0       	ldi	r20, 0x03	; 3
 19e:	2f ef       	ldi	r18, 0xFF	; 255
 1a0:	55 df       	rcall	.-342    	; 0x4c <SetPins>
		SetPins('D', 'D', 0xFF, 0xFF);//set D outputs
 1a2:	84 e4       	ldi	r24, 0x44	; 68
 1a4:	64 e4       	ldi	r22, 0x44	; 68
 1a6:	4f ef       	ldi	r20, 0xFF	; 255
 1a8:	2f ef       	ldi	r18, 0xFF	; 255
 1aa:	50 df       	rcall	.-352    	; 0x4c <SetPins>
		SetPins('D', 'B', 0x03, 0xFF);//set B outputs
 1ac:	84 e4       	ldi	r24, 0x44	; 68
 1ae:	62 e4       	ldi	r22, 0x42	; 66
 1b0:	43 e0       	ldi	r20, 0x03	; 3
 1b2:	2f ef       	ldi	r18, 0xFF	; 255
 1b4:	4b df       	rcall	.-362    	; 0x4c <SetPins>
bool EnableKey = 1;
uint32_t KeyPressedCntStart = 0;
uint16_t Keys = 0x0000;
inline void ProcessInput()
{
	if (Keys)
 1b6:	80 91 7c 00 	lds	r24, 0x007C
 1ba:	90 91 7d 00 	lds	r25, 0x007D
 1be:	89 2b       	or	r24, r25
 1c0:	09 f4       	brne	.+2      	; 0x1c4 <__vector_4+0x84>
 1c2:	72 c0       	rjmp	.+228    	; 0x2a8 <__vector_4+0x168>
	{
		if (!KeyPressed && EnableKey)
 1c4:	80 91 77 00 	lds	r24, 0x0077
 1c8:	88 23       	and	r24, r24
 1ca:	09 f0       	breq	.+2      	; 0x1ce <__vector_4+0x8e>
 1cc:	5c c0       	rjmp	.+184    	; 0x286 <__vector_4+0x146>
 1ce:	80 91 6c 00 	lds	r24, 0x006C
 1d2:	88 23       	and	r24, r24
 1d4:	09 f4       	brne	.+2      	; 0x1d8 <__vector_4+0x98>
 1d6:	57 c0       	rjmp	.+174    	; 0x286 <__vector_4+0x146>
		{
			KeyPressed = 1;
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	80 93 77 00 	sts	0x0077, r24
			KeyPressedCntStart = Counter;
 1de:	80 91 6e 00 	lds	r24, 0x006E
 1e2:	90 91 6f 00 	lds	r25, 0x006F
 1e6:	a0 91 70 00 	lds	r26, 0x0070
 1ea:	b0 91 71 00 	lds	r27, 0x0071
 1ee:	80 93 78 00 	sts	0x0078, r24
 1f2:	90 93 79 00 	sts	0x0079, r25
 1f6:	a0 93 7a 00 	sts	0x007A, r26
 1fa:	b0 93 7b 00 	sts	0x007B, r27
			EnableKey = 0;
 1fe:	10 92 6c 00 	sts	0x006C, r1
			SetPins('P', 'B', 0x04, 0x04);
 202:	80 e5       	ldi	r24, 0x50	; 80
 204:	62 e4       	ldi	r22, 0x42	; 66
 206:	44 e0       	ldi	r20, 0x04	; 4
 208:	24 e0       	ldi	r18, 0x04	; 4
 20a:	20 df       	rcall	.-448    	; 0x4c <SetPins>

			//test that only 1 key is pressed
			if (!(Keys & (Keys - 1)))
 20c:	20 91 7c 00 	lds	r18, 0x007C
 210:	30 91 7d 00 	lds	r19, 0x007D
 214:	82 2f       	mov	r24, r18
 216:	93 2f       	mov	r25, r19
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	82 23       	and	r24, r18
 21c:	93 23       	and	r25, r19
 21e:	89 2b       	or	r24, r25
 220:	79 f5       	brne	.+94     	; 0x280 <__vector_4+0x140>
				//find whick key is pressed
				//int keyNumber = 0;
				//while (Keys != 1) { Keys >>= 1; ++keyNumber; }
				//keyNumber = log(Keys);
				//check if key is the correct button in the sequence
				if (Password[PasswordIndex] == Keys)//keyNumber)
 222:	40 91 72 00 	lds	r20, 0x0072
 226:	e4 2f       	mov	r30, r20
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	ee 0f       	add	r30, r30
 22c:	ff 1f       	adc	r31, r31
 22e:	e0 5a       	subi	r30, 0xA0	; 160
 230:	ff 4f       	sbci	r31, 0xFF	; 255
 232:	80 81       	ld	r24, Z
 234:	91 81       	ldd	r25, Z+1	; 0x01
 236:	82 17       	cp	r24, r18
 238:	93 07       	cpc	r25, r19
 23a:	21 f4       	brne	.+8      	; 0x244 <__vector_4+0x104>
				{
					++PasswordIndex;
 23c:	4f 5f       	subi	r20, 0xFF	; 255
 23e:	40 93 72 00 	sts	0x0072, r20
 242:	02 c0       	rjmp	.+4      	; 0x248 <__vector_4+0x108>
				}
				else
				{
					PasswordIndex = 0;
 244:	10 92 72 00 	sts	0x0072, r1
				}
				//correct password condition
				if (PasswordIndex == 4)
 248:	80 91 72 00 	lds	r24, 0x0072
 24c:	84 30       	cpi	r24, 0x04	; 4
 24e:	71 f5       	brne	.+92     	; 0x2ac <__vector_4+0x16c>
				{
					PasswordIndex = 0;
 250:	10 92 72 00 	sts	0x0072, r1
}

inline void EnableMotor()
{
	//DisableMotor();
	SetPins('P', 'B', 0b00011000, 0b00001000);
 254:	80 e5       	ldi	r24, 0x50	; 80
 256:	62 e4       	ldi	r22, 0x42	; 66
 258:	48 e1       	ldi	r20, 0x18	; 24
 25a:	28 e0       	ldi	r18, 0x08	; 8
 25c:	f7 de       	rcall	.-530    	; 0x4c <SetPins>
				if (PasswordIndex == 4)
				{
					PasswordIndex = 0;
					//SetPins('P', 'B', 0x08, 0x08);//set correct output line high
					EnableMotor();
					CorrectPasswordCntStart = Counter;
 25e:	80 91 6e 00 	lds	r24, 0x006E
 262:	90 91 6f 00 	lds	r25, 0x006F
 266:	a0 91 70 00 	lds	r26, 0x0070
 26a:	b0 91 71 00 	lds	r27, 0x0071
 26e:	80 93 73 00 	sts	0x0073, r24
 272:	90 93 74 00 	sts	0x0074, r25
 276:	a0 93 75 00 	sts	0x0075, r26
 27a:	b0 93 76 00 	sts	0x0076, r27
 27e:	16 c0       	rjmp	.+44     	; 0x2ac <__vector_4+0x16c>
				}
			}
			else
			{
				PasswordIndex = 0;
 280:	10 92 72 00 	sts	0x0072, r1
 284:	13 c0       	rjmp	.+38     	; 0x2ac <__vector_4+0x16c>
			}
		}
		else
		{
			KeyPressedCntStart = Counter;
 286:	80 91 6e 00 	lds	r24, 0x006E
 28a:	90 91 6f 00 	lds	r25, 0x006F
 28e:	a0 91 70 00 	lds	r26, 0x0070
 292:	b0 91 71 00 	lds	r27, 0x0071
 296:	80 93 78 00 	sts	0x0078, r24
 29a:	90 93 79 00 	sts	0x0079, r25
 29e:	a0 93 7a 00 	sts	0x007A, r26
 2a2:	b0 93 7b 00 	sts	0x007B, r27
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <__vector_4+0x16c>
		}
	}
	else
	{
		KeyPressed = 0;
 2a8:	10 92 77 00 	sts	0x0077, r1
		{
			PORTB &= ~(1 << 0);//set to 0
		}*/
		ProcessInput();

		State = 0;
 2ac:	10 92 7e 00 	sts	0x007E, r1
inline void SetSlowTimer()
{
	//cli();

	// Compare Match Interrupt Enable for Timer1
    TIMSK |= (1<<OCIE1A);
 2b0:	89 b7       	in	r24, 0x39	; 57
 2b2:	80 64       	ori	r24, 0x40	; 64
 2b4:	89 bf       	out	0x39, r24	; 57
	// set timer1 counter initial value to 0
    TCNT1 = 0x0000;
 2b6:	1d bc       	out	0x2d, r1	; 45
 2b8:	1c bc       	out	0x2c, r1	; 44
	// lets turn on 16 bit timer1 also
    TCCR1B |= (0 << CS12) | (1 << CS11) | (1 << CS10) | (1 << CTC1);
 2ba:	8e b5       	in	r24, 0x2e	; 46
 2bc:	8b 60       	ori	r24, 0x0B	; 11
 2be:	8e bd       	out	0x2e, r24	; 46
	//set compare register
	OCR1A = 0x04E2;
 2c0:	82 ee       	ldi	r24, 0xE2	; 226
 2c2:	94 e0       	ldi	r25, 0x04	; 4
 2c4:	9b bd       	out	0x2b, r25	; 43
 2c6:	8a bd       	out	0x2a, r24	; 42


	// enable interrupts
    sei();
 2c8:	78 94       	sei
 2ca:	24 c0       	rjmp	.+72     	; 0x314 <__vector_4+0x1d4>
	else
	{
		//PORTD = 0x0;
		//DDRD = 0x00; //all inputs
		//PORTD = 0x00; //pull down
		SetPins('D', 'D', 0xFF, 0x00);//set D inputs
 2cc:	84 e4       	ldi	r24, 0x44	; 68
 2ce:	64 e4       	ldi	r22, 0x44	; 68
 2d0:	4f ef       	ldi	r20, 0xFF	; 255
 2d2:	20 e0       	ldi	r18, 0x00	; 0
 2d4:	bb de       	rcall	.-650    	; 0x4c <SetPins>
		SetPins('D', 'B', 0x03, 0x00);//set B inputs
 2d6:	84 e4       	ldi	r24, 0x44	; 68
 2d8:	62 e4       	ldi	r22, 0x42	; 66
 2da:	43 e0       	ldi	r20, 0x03	; 3
 2dc:	20 e0       	ldi	r18, 0x00	; 0
 2de:	b6 de       	rcall	.-660    	; 0x4c <SetPins>
		SetPins('P', 'D', 0xFF, 0x00);//set D pull down
 2e0:	80 e5       	ldi	r24, 0x50	; 80
 2e2:	64 e4       	ldi	r22, 0x44	; 68
 2e4:	4f ef       	ldi	r20, 0xFF	; 255
 2e6:	20 e0       	ldi	r18, 0x00	; 0
 2e8:	b1 de       	rcall	.-670    	; 0x4c <SetPins>
		SetPins('P', 'B', 0x03, 0x00);//set B pull down
 2ea:	80 e5       	ldi	r24, 0x50	; 80
 2ec:	62 e4       	ldi	r22, 0x42	; 66
 2ee:	43 e0       	ldi	r20, 0x03	; 3
 2f0:	20 e0       	ldi	r18, 0x00	; 0
 2f2:	ac de       	rcall	.-680    	; 0x4c <SetPins>

		State = 1;
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	80 93 7e 00 	sts	0x007E, r24
inline void SetFastTimer()
{
	//cli();

	// Compare Match Interrupt Enable for Timer1
    TIMSK |= (1<<OCIE1A);
 2fa:	89 b7       	in	r24, 0x39	; 57
 2fc:	80 64       	ori	r24, 0x40	; 64
 2fe:	89 bf       	out	0x39, r24	; 57
	// set timer1 counter initial value to 0
    TCNT1 = 0x0000;
 300:	1d bc       	out	0x2d, r1	; 45
 302:	1c bc       	out	0x2c, r1	; 44
	// lets turn on 16 bit timer1 also
    TCCR1B |= (0 << CS12) | (1 << CS11) | (0 << CS10) | (1 << CTC1);
 304:	8e b5       	in	r24, 0x2e	; 46
 306:	8a 60       	ori	r24, 0x0A	; 10
 308:	8e bd       	out	0x2e, r24	; 46
	//set compare register
	OCR1A = 0x0002;
 30a:	82 e0       	ldi	r24, 0x02	; 2
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	9b bd       	out	0x2b, r25	; 43
 310:	8a bd       	out	0x2a, r24	; 42


	// enable interrupts
    sei();
 312:	78 94       	sei
		SetPins('P', 'B', 0x03, 0x00);//set B pull down

		State = 1;
		SetFastTimer();
	}
}
 314:	ff 91       	pop	r31
 316:	ef 91       	pop	r30
 318:	bf 91       	pop	r27
 31a:	af 91       	pop	r26
 31c:	9f 91       	pop	r25
 31e:	8f 91       	pop	r24
 320:	7f 91       	pop	r23
 322:	6f 91       	pop	r22
 324:	5f 91       	pop	r21
 326:	4f 91       	pop	r20
 328:	3f 91       	pop	r19
 32a:	2f 91       	pop	r18
 32c:	0f 90       	pop	r0
 32e:	0f be       	out	0x3f, r0	; 63
 330:	0f 90       	pop	r0
 332:	1f 90       	pop	r1
 334:	18 95       	reti

00000336 <main>:

uint8_t MotorState = 0;
void main()
{
 336:	0f 93       	push	r16
 338:	1f 93       	push	r17
    sei();
}

inline void SetTimer0()
{
	TIMSK |= (1<<TOIE0);
 33a:	89 b7       	in	r24, 0x39	; 57
 33c:	82 60       	ori	r24, 0x02	; 2
 33e:	89 bf       	out	0x39, r24	; 57
	// set timer1 counter initial value to 0
    TCNT0 = 0x00;
 340:	12 be       	out	0x32, r1	; 50
	// lets turn on 16 bit timer1 also
    TCCR0 |= (0 << CS12) | (1 << CS11) | (1 << CS10);
 342:	83 b7       	in	r24, 0x33	; 51
 344:	83 60       	ori	r24, 0x03	; 3
 346:	83 bf       	out	0x33, r24	; 51
inline void SetSlowTimer()
{
	//cli();

	// Compare Match Interrupt Enable for Timer1
    TIMSK |= (1<<OCIE1A);
 348:	89 b7       	in	r24, 0x39	; 57
 34a:	80 64       	ori	r24, 0x40	; 64
 34c:	89 bf       	out	0x39, r24	; 57
	// set timer1 counter initial value to 0
    TCNT1 = 0x0000;
 34e:	1d bc       	out	0x2d, r1	; 45
 350:	1c bc       	out	0x2c, r1	; 44
	// lets turn on 16 bit timer1 also
    TCCR1B |= (0 << CS12) | (1 << CS11) | (1 << CS10) | (1 << CTC1);
 352:	8e b5       	in	r24, 0x2e	; 46
 354:	8b 60       	ori	r24, 0x0B	; 11
 356:	8e bd       	out	0x2e, r24	; 46
	//set compare register
	OCR1A = 0x04E2;
 358:	82 ee       	ldi	r24, 0xE2	; 226
 35a:	94 e0       	ldi	r25, 0x04	; 4
 35c:	9b bd       	out	0x2b, r25	; 43
 35e:	8a bd       	out	0x2a, r24	; 42


	// enable interrupts
    sei();
 360:	78 94       	sei
	SetTimer0();
	SetSlowTimer();
	
	//DDRB = 0b00000011;
	//DDRD = 0xFF;
	SetPins('D', 'D', 0xFF, 0xFF);
 362:	84 e4       	ldi	r24, 0x44	; 68
 364:	64 e4       	ldi	r22, 0x44	; 68
 366:	4f ef       	ldi	r20, 0xFF	; 255
 368:	2f ef       	ldi	r18, 0xFF	; 255
 36a:	70 de       	rcall	.-800    	; 0x4c <SetPins>
	SetPins('D', 'B', 0x1F, 0x1F);
 36c:	84 e4       	ldi	r24, 0x44	; 68
 36e:	62 e4       	ldi	r22, 0x42	; 66
 370:	4f e1       	ldi	r20, 0x1F	; 31
 372:	2f e1       	ldi	r18, 0x1F	; 31
 374:	6b de       	rcall	.-810    	; 0x4c <SetPins>

	//PORTD = 0xFF;
	//PORTB = 0b00000010;
	SetPins('P', 'D', 0xFF, 0xFF);
 376:	80 e5       	ldi	r24, 0x50	; 80
 378:	64 e4       	ldi	r22, 0x44	; 68
 37a:	4f ef       	ldi	r20, 0xFF	; 255
 37c:	2f ef       	ldi	r18, 0xFF	; 255
 37e:	66 de       	rcall	.-820    	; 0x4c <SetPins>
	SetPins('P', 'B', 0x03, 0x03);
 380:	80 e5       	ldi	r24, 0x50	; 80
 382:	62 e4       	ldi	r22, 0x42	; 66
 384:	43 e0       	ldi	r20, 0x03	; 3
 386:	23 e0       	ldi	r18, 0x03	; 3
 388:	61 de       	rcall	.-830    	; 0x4c <SetPins>
			if (Counter - CorrectPasswordCntStart >= 4700 && MotorState == 1)
			{
				//CorrectPasswordCntStart = 0;
				//SetPins('P', 'B', 0x08, 0x00);
				ReverseMotor();
				MotorState = 2;
 38a:	02 e0       	ldi	r16, 0x02	; 2
			if (Counter - CorrectPasswordCntStart >= 4200 && MotorState == 0)
			{
				//CorrectPasswordCntStart = 0;
				//SetPins('P', 'B', 0x08, 0x00);
				DisableMotor();
				MotorState = 1;
 38c:	11 e0       	ldi	r17, 0x01	; 1
	SetPins('P', 'B', 0x03, 0x03);

	//int i = 0;
	while (1)
	{
		if (CorrectPasswordCntStart)
 38e:	20 91 73 00 	lds	r18, 0x0073
 392:	30 91 74 00 	lds	r19, 0x0074
 396:	40 91 75 00 	lds	r20, 0x0075
 39a:	50 91 76 00 	lds	r21, 0x0076
 39e:	21 15       	cp	r18, r1
 3a0:	31 05       	cpc	r19, r1
 3a2:	41 05       	cpc	r20, r1
 3a4:	51 05       	cpc	r21, r1
 3a6:	09 f4       	brne	.+2      	; 0x3aa <main+0x74>
 3a8:	89 c0       	rjmp	.+274    	; 0x4bc <main+0x186>
		{
			if (Counter - CorrectPasswordCntStart >= 4200 && MotorState == 0)
 3aa:	80 91 6e 00 	lds	r24, 0x006E
 3ae:	90 91 6f 00 	lds	r25, 0x006F
 3b2:	a0 91 70 00 	lds	r26, 0x0070
 3b6:	b0 91 71 00 	lds	r27, 0x0071
 3ba:	82 1b       	sub	r24, r18
 3bc:	93 0b       	sbc	r25, r19
 3be:	a4 0b       	sbc	r26, r20
 3c0:	b5 0b       	sbc	r27, r21
 3c2:	88 56       	subi	r24, 0x68	; 104
 3c4:	90 41       	sbci	r25, 0x10	; 16
 3c6:	a0 40       	sbci	r26, 0x00	; 0
 3c8:	b0 40       	sbci	r27, 0x00	; 0
 3ca:	58 f0       	brcs	.+22     	; 0x3e2 <main+0xac>
 3cc:	80 91 7f 00 	lds	r24, 0x007F
 3d0:	88 23       	and	r24, r24
 3d2:	39 f4       	brne	.+14     	; 0x3e2 <main+0xac>
	++Counter;
}

inline void DisableMotor()
{
	SetPins('P', 'B', 0b00011000, 0b00000000);
 3d4:	80 e5       	ldi	r24, 0x50	; 80
 3d6:	62 e4       	ldi	r22, 0x42	; 66
 3d8:	48 e1       	ldi	r20, 0x18	; 24
 3da:	20 e0       	ldi	r18, 0x00	; 0
 3dc:	37 de       	rcall	.-914    	; 0x4c <SetPins>
			if (Counter - CorrectPasswordCntStart >= 4200 && MotorState == 0)
			{
				//CorrectPasswordCntStart = 0;
				//SetPins('P', 'B', 0x08, 0x00);
				DisableMotor();
				MotorState = 1;
 3de:	10 93 7f 00 	sts	0x007F, r17
			}
			if (Counter - CorrectPasswordCntStart >= 4700 && MotorState == 1)
 3e2:	80 91 6e 00 	lds	r24, 0x006E
 3e6:	90 91 6f 00 	lds	r25, 0x006F
 3ea:	a0 91 70 00 	lds	r26, 0x0070
 3ee:	b0 91 71 00 	lds	r27, 0x0071
 3f2:	20 91 73 00 	lds	r18, 0x0073
 3f6:	30 91 74 00 	lds	r19, 0x0074
 3fa:	40 91 75 00 	lds	r20, 0x0075
 3fe:	50 91 76 00 	lds	r21, 0x0076
 402:	82 1b       	sub	r24, r18
 404:	93 0b       	sbc	r25, r19
 406:	a4 0b       	sbc	r26, r20
 408:	b5 0b       	sbc	r27, r21
 40a:	8c 55       	subi	r24, 0x5C	; 92
 40c:	92 41       	sbci	r25, 0x12	; 18
 40e:	a0 40       	sbci	r26, 0x00	; 0
 410:	b0 40       	sbci	r27, 0x00	; 0
 412:	58 f0       	brcs	.+22     	; 0x42a <main+0xf4>
 414:	80 91 7f 00 	lds	r24, 0x007F
 418:	81 30       	cpi	r24, 0x01	; 1
 41a:	39 f4       	brne	.+14     	; 0x42a <main+0xf4>
}

inline void ReverseMotor()
{
	//DisableMotor();
	SetPins('P', 'B', 0b00011000, 0b00010000);
 41c:	80 e5       	ldi	r24, 0x50	; 80
 41e:	62 e4       	ldi	r22, 0x42	; 66
 420:	48 e1       	ldi	r20, 0x18	; 24
 422:	20 e1       	ldi	r18, 0x10	; 16
 424:	13 de       	rcall	.-986    	; 0x4c <SetPins>
			if (Counter - CorrectPasswordCntStart >= 4700 && MotorState == 1)
			{
				//CorrectPasswordCntStart = 0;
				//SetPins('P', 'B', 0x08, 0x00);
				ReverseMotor();
				MotorState = 2;
 426:	00 93 7f 00 	sts	0x007F, r16
			}
			if (Counter - CorrectPasswordCntStart >= 6700 && MotorState == 2)
 42a:	80 91 6e 00 	lds	r24, 0x006E
 42e:	90 91 6f 00 	lds	r25, 0x006F
 432:	a0 91 70 00 	lds	r26, 0x0070
 436:	b0 91 71 00 	lds	r27, 0x0071
 43a:	20 91 73 00 	lds	r18, 0x0073
 43e:	30 91 74 00 	lds	r19, 0x0074
 442:	40 91 75 00 	lds	r20, 0x0075
 446:	50 91 76 00 	lds	r21, 0x0076
 44a:	82 1b       	sub	r24, r18
 44c:	93 0b       	sbc	r25, r19
 44e:	a4 0b       	sbc	r26, r20
 450:	b5 0b       	sbc	r27, r21
 452:	8c 52       	subi	r24, 0x2C	; 44
 454:	9a 41       	sbci	r25, 0x1A	; 26
 456:	a0 40       	sbci	r26, 0x00	; 0
 458:	b0 40       	sbci	r27, 0x00	; 0
 45a:	98 f0       	brcs	.+38     	; 0x482 <main+0x14c>
 45c:	80 91 7f 00 	lds	r24, 0x007F
 460:	82 30       	cpi	r24, 0x02	; 2
 462:	79 f4       	brne	.+30     	; 0x482 <main+0x14c>
			{
				CorrectPasswordCntStart = 0;
 464:	10 92 73 00 	sts	0x0073, r1
 468:	10 92 74 00 	sts	0x0074, r1
 46c:	10 92 75 00 	sts	0x0075, r1
 470:	10 92 76 00 	sts	0x0076, r1
	++Counter;
}

inline void DisableMotor()
{
	SetPins('P', 'B', 0b00011000, 0b00000000);
 474:	80 e5       	ldi	r24, 0x50	; 80
 476:	62 e4       	ldi	r22, 0x42	; 66
 478:	48 e1       	ldi	r20, 0x18	; 24
 47a:	20 e0       	ldi	r18, 0x00	; 0
 47c:	e7 dd       	rcall	.-1074   	; 0x4c <SetPins>
			}
			if (Counter - CorrectPasswordCntStart >= 6700 && MotorState == 2)
			{
				CorrectPasswordCntStart = 0;
				DisableMotor();
				MotorState = 0;
 47e:	10 92 7f 00 	sts	0x007F, r1
			}
			if (CorrectPasswordCntStart > Counter)
 482:	20 91 73 00 	lds	r18, 0x0073
 486:	30 91 74 00 	lds	r19, 0x0074
 48a:	40 91 75 00 	lds	r20, 0x0075
 48e:	50 91 76 00 	lds	r21, 0x0076
 492:	80 91 6e 00 	lds	r24, 0x006E
 496:	90 91 6f 00 	lds	r25, 0x006F
 49a:	a0 91 70 00 	lds	r26, 0x0070
 49e:	b0 91 71 00 	lds	r27, 0x0071
 4a2:	82 17       	cp	r24, r18
 4a4:	93 07       	cpc	r25, r19
 4a6:	a4 07       	cpc	r26, r20
 4a8:	b5 07       	cpc	r27, r21
 4aa:	40 f4       	brcc	.+16     	; 0x4bc <main+0x186>
			{
				CorrectPasswordCntStart = 0;
 4ac:	10 92 73 00 	sts	0x0073, r1
 4b0:	10 92 74 00 	sts	0x0074, r1
 4b4:	10 92 75 00 	sts	0x0075, r1
 4b8:	10 92 76 00 	sts	0x0076, r1
			}
		}
		if (KeyPressedCntStart)
 4bc:	20 91 78 00 	lds	r18, 0x0078
 4c0:	30 91 79 00 	lds	r19, 0x0079
 4c4:	40 91 7a 00 	lds	r20, 0x007A
 4c8:	50 91 7b 00 	lds	r21, 0x007B
 4cc:	21 15       	cp	r18, r1
 4ce:	31 05       	cpc	r19, r1
 4d0:	41 05       	cpc	r20, r1
 4d2:	51 05       	cpc	r21, r1
 4d4:	e1 f1       	breq	.+120    	; 0x54e <main+0x218>
			//if (Counter - KeyPressedCntStart >= 10)
			//{
			//	//KeyPressedCntStart = 0;
			//	SetPins('P', 'B', 0x04, 0x00);
			//}
			if (Counter - KeyPressedCntStart >= 50)
 4d6:	80 91 6e 00 	lds	r24, 0x006E
 4da:	90 91 6f 00 	lds	r25, 0x006F
 4de:	a0 91 70 00 	lds	r26, 0x0070
 4e2:	b0 91 71 00 	lds	r27, 0x0071
 4e6:	82 1b       	sub	r24, r18
 4e8:	93 0b       	sbc	r25, r19
 4ea:	a4 0b       	sbc	r26, r20
 4ec:	b5 0b       	sbc	r27, r21
 4ee:	c2 97       	sbiw	r24, 0x32	; 50
 4f0:	a1 05       	cpc	r26, r1
 4f2:	b1 05       	cpc	r27, r1
 4f4:	78 f0       	brcs	.+30     	; 0x514 <main+0x1de>
			{
				SetPins('P', 'B', 0x04, 0x00);
 4f6:	80 e5       	ldi	r24, 0x50	; 80
 4f8:	62 e4       	ldi	r22, 0x42	; 66
 4fa:	44 e0       	ldi	r20, 0x04	; 4
 4fc:	20 e0       	ldi	r18, 0x00	; 0
 4fe:	a6 dd       	rcall	.-1204   	; 0x4c <SetPins>
				KeyPressedCntStart = 0;
 500:	10 92 78 00 	sts	0x0078, r1
 504:	10 92 79 00 	sts	0x0079, r1
 508:	10 92 7a 00 	sts	0x007A, r1
 50c:	10 92 7b 00 	sts	0x007B, r1
				EnableKey = 1;
 510:	10 93 6c 00 	sts	0x006C, r17
			}
			if (KeyPressedCntStart > Counter)
 514:	20 91 78 00 	lds	r18, 0x0078
 518:	30 91 79 00 	lds	r19, 0x0079
 51c:	40 91 7a 00 	lds	r20, 0x007A
 520:	50 91 7b 00 	lds	r21, 0x007B
 524:	80 91 6e 00 	lds	r24, 0x006E
 528:	90 91 6f 00 	lds	r25, 0x006F
 52c:	a0 91 70 00 	lds	r26, 0x0070
 530:	b0 91 71 00 	lds	r27, 0x0071
 534:	82 17       	cp	r24, r18
 536:	93 07       	cpc	r25, r19
 538:	a4 07       	cpc	r26, r20
 53a:	b5 07       	cpc	r27, r21
 53c:	40 f4       	brcc	.+16     	; 0x54e <main+0x218>
			{
				KeyPressedCntStart = 0;
 53e:	10 92 78 00 	sts	0x0078, r1
 542:	10 92 79 00 	sts	0x0079, r1
 546:	10 92 7a 00 	sts	0x007A, r1
 54a:	10 92 7b 00 	sts	0x007B, r1
		//SetPin(5, 1);
		//Delay(100);
		//SetPin(5, 0);
		//SetPin(6, ReadPin(5));
		//Delay(100);
		if (TCNT1 > OCR1A)
 54e:	2c b5       	in	r18, 0x2c	; 44
 550:	3d b5       	in	r19, 0x2d	; 45
 552:	8a b5       	in	r24, 0x2a	; 42
 554:	9b b5       	in	r25, 0x2b	; 43
 556:	82 17       	cp	r24, r18
 558:	93 07       	cpc	r25, r19
 55a:	08 f0       	brcs	.+2      	; 0x55e <main+0x228>
 55c:	18 cf       	rjmp	.-464    	; 0x38e <main+0x58>
		{
			TCNT1 = 0;
 55e:	1d bc       	out	0x2d, r1	; 45
 560:	1c bc       	out	0x2c, r1	; 44
 562:	15 cf       	rjmp	.-470    	; 0x38e <main+0x58>

00000564 <_exit>:
 564:	f8 94       	cli

00000566 <__stop_program>:
 566:	ff cf       	rjmp	.-2      	; 0x566 <__stop_program>
